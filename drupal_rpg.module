<?php
module_load_include('php', 'drupal_rpg', 'state');

// Czy link przejścia jest widoczny
function is_transition_visible($nodeid)
{
	$trans = node_load($nodeid);
	$st = new PlayerState();

	if (!isset($trans->transition_visibility['und']))
		return TRUE;

	foreach ($trans->transition_visibility['und'] as $item)
		if (!$st->findItem($item['target_id']))
			return FALSE;

	return TRUE;
}

// Czy link prowadzący do przejścia jest aktywny
function is_transition_disabled($nodeid)
{
	$trans = node_load($nodeid);
	$st = new PlayerState();

	if (!isset($trans->transition_fire['und']))
		return FALSE;

	foreach ($trans->transition_fire['und'] as $item)
		if (!$st->findItem($item['target_id']))
			return TRUE;

	return FALSE;
}

// Zmienia wygląd pokoju
function drupal_rpg_node_view_alter(&$build)
{
	// Szybkie sprawdzenie typu
	if (!isset($build['room_title']))
		return;

	// Ustaw tytuł
	drupal_set_title($build['room_title']['#items'][0]['value']);
	
	// Wstaw status gracza - życie, pieniądze, przedmioty
	$st = new PlayerState();
	/*$status = 'Życie: '.$st->getHealth().' <br>';
	$status .= 'Pieniądze: '.$st->getMoney().' <br>';
	$status .= 'Przedmioty: '.$st->listItems().' <br>';
	$status .= '<hr>';
	$build['room_description'][0]['#markup'] = $status.$build['room_description'][0]['#markup'];*/

	// Zapisanie aktualnego pokoju
	$st->setRoom($build['#node']->nid);

	// Ukryj pole z informacją o nazwie pomieszczenia
	unset($build['room_title']);

	// Drobne poprawki w wyświetlaniu
	$build['room_description']['#label_display'] = 'hidden';
	$build['room_transitions']['#label_display'] = 'above';
	$build['room_transitions']['#title'] = 'Możliwe akcje';
	
	// Zmień ustawienia tranzycji
	// Nie pytaj się, po co te zmienne, one po prostu muszą być
	if (!isset($build['room_transitions']['#items']))
		return;

	$newarr = array();
	$cnt = 0;

	foreach($build['room_transitions']['#items'] as $key => $val)
	{
		// Zmiana widoczności
		if (!is_transition_visible($val['target_id']))
			continue;

		$newarr[] = $val;
		
		$tmp = $build['room_transitions'][$key];
		unset($build['room_transitions'][$key]);
		
		// Jeśli tranzycja jest nieaktywna to podmieniamy link
		if (is_transition_disabled($val['target_id']))
			$tmp['#markup'] = preg_replace('~<[^>]*>~', '', $tmp['#markup']);

		$build['room_transitions'][$cnt] = $tmp;
		++$cnt;
	}

	$build['room_transitions']['#items'] = $newarr;
}

// Wykonanie tranzycji - zmiany stanu
function drupal_rpg_node_view($node, $view_mode)
{
	$st = new PlayerState();
	
	//Reset przy powrocie do początku
	if ($node->type == "room") {
		if ($node->nid == 44)
			$st->reset();
	}
	
	// Jeśli typ węzła nas nie interesuje, to zostawiamy go bez zmian
	if ($node->type != "transition")
		return $node;

	if ($view_mode != 'full' || !node_is_page($node))
		return $node;

	// Wykonujemy przejście
	// Reset stanu postaci
	if ($node->transition_reset['und'][0]['value'] == 1)
		$st->reset();

	// Zmiana życia
	$hp = $st->getHealth();
	$hp += $node->transition_life_change['und'][0]['value'];
	if ($hp > 100)
		$hp = 100;
	$st->setHealth($hp);

	// Zmiana pieniędzy
	$mp = $st->getMoney();
	$mp += $node->transition_money_change['und'][0]['value'];
	$st->setMoney($mp);

	// Zmiany przedmiotów
	if (isset($node->transition_item_add['und']))
		foreach ($node->transition_item_add['und'] as $item)
			$st->addItem($item['target_id']);

	if (isset($node->transition_item_remove['und']))
		foreach ($node->transition_item_remove['und'] as $item)
			$st->removeItem($item['target_id']);
	
	// Po śmierci zmieniamy na dead page
	if ($st->getHealth() <= 0 && isset($node->transition_death[LANGUAGE_NONE][0]['target_id']))
	{
		$st->setHealth(0);
		$dest = $node->transition_death[LANGUAGE_NONE][0]['target_id'];
		drupal_goto('node/'.$dest.'/', array());
	}
	
	// Skok do zapisanego pokoju
	if ($node->transition_load['und'][0]['value'] == 1 && $st->getRoom() != '')
	{
		$dest = $st->getRoom();
		drupal_goto('node/'.$dest.'/', array());
	}

	// Zmieniamy cel
	$dest = $node->transition_link[LANGUAGE_NONE][0]['target_id'];
	drupal_goto('node/'.$dest.'/', array());

	return $node;
}

/**
 * Implements hook_block_info().
 */
function drupal_rpg_block_info() {
	$blocks = array();
	$blocks['hp_block'] = array('info' => t('HP'));
	$blocks['money_block'] = array('info' => t('Money'));
	$blocks['items_block'] = array('info' => t('Items'));

	return $blocks;
}

function drupal_rpg_block_view($delta = '') {
	$block = array();
	$st = new PlayerState();
	$status = '';
	
	switch($delta) {
		case 'hp_block':
			$block['subject'] = t('Życie');
			$status = '<div id="hp-bar"></div>';
			drupal_add_js('var hp = '.$st->getHealth().'; var max_hp = 100;', 'inline');
			drupal_add_js('sites/all/modules/drupal_rpg/hp_bar.js', 'file');
			break;
		case 'money_block':
			$block['subject'] = t('Pieniądze');
			$status = $st->getMoney();
			break;
		case 'items_block':
			$block['subject'] = t('Przedmioty');
			$status = $st->listItems();
			break;
	}

	$block['content'] = array(
		'#type' => 'markup',
		'#markup' => $status,
	);

	return $block;
}

